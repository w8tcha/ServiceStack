@inherits UiComponentBase

<div @onclick="Close" id=@Id aria-labelledby="modal-title" role="dialog" aria-modal="true" class=@ClassNames("relative z-10", DialogTransition.DisplayClass)>
    <div class=@ClassNames("fixed inset-0 bg-gray-500 bg-opacity-75 transition-opacity", DialogTransition.Class)></div>
    <div class="fixed inset-0 z-10 overflow-y-auto">
        <div class="flex min-h-full items-end justify-center p-4 text-center sm:items-center sm:p-0">

            <!-- This element is to trick the browser into centering the modal contents. -->
            <span class="hidden sm:inline-block sm:align-middle sm:h-screen" aria-hidden="true">&#8203;</span>

            <div
                 class=@ClassNames("relative transform overflow-hidden rounded-lg bg-white text-left shadow-xl transition-all sm:my-8 sm:w-full sm:max-w-lg",
                 ContentTransition.DisplayClass)>
                <div class="hidden sm:block absolute top-0 right-0 pt-4 pr-4"@onclick="Close" >
                    <button type="button" @onclick="Close"
                            class="bg-white rounded-md text-gray-400 hover:text-gray-500 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500">
                        <span class="sr-only">Close</span>
                        <!-- Heroicon name: outline/x -->
                        <svg class="h-6 w-6" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" aria-hidden="true">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
                        </svg>
                    </button>
                </div>
                <div @onclick:stopPropagation="true">
                    @ChildContent
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    [Parameter, EditorRequired] public string Id { get; set; }
    [Parameter, EditorRequired] public bool Show { get; set; }
    [Parameter, EditorRequired] public RenderFragment ChildContent { get; set; }
    [Parameter] public EventCallback Close { get; set; }

    protected DataTransition DialogTransition = new DataTransition(
        entering: new(@class: "ease-out duration-300", from: "opacity-0", to: "opacity-100"),
        leaving: new(@class: "ease-out duration-200", from: "opacity-100", to: "opacity-0"),
        visible: false);

    protected DataTransition ContentTransition = new DataTransition(
        entering: new(@class: "ease-out duration-300", from: "opacity-0 translate-y-4 sm:translate-y-0 sm:scale-95", to: "opacity-100 translate-y-0 sm:scale-100"),
        leaving: new(@class: "ease-in duration-200", from: "opacity-100 translate-y-0 sm:scale-100", to: "opacity-0 translate-y-4 sm:translate-y-0 sm:scale-95"),
        visible:false);

    protected override void OnInitialized()
    {
        base.OnInitialized();
        DialogTransition.Show(Show);
        ContentTransition.Show(Show);
    }

    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();
        await DataTransition.TransitionAllAsync(
            show: Show,
            onChange: StateHasChanged,
            DialogTransition,
            ContentTransition
        );
    }
}
